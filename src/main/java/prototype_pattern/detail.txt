意图
    用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象

主要解决
    在运行期创建和删除原型

何时使用：
    1 当一个系统英国独立与它的长跑创建，构成和表示时。
    2 当要实例化的类时在运行时刻指定时，例如，通过动态装载。
    3 为了避免创建一个与产品类层次平行的工厂类层次时。
    4 当一个类的实例只能有几个不同状态组合中的一种时。
    建立相应数目的原型并克隆它们可能比每次用何时的状态手工实例化更方便一些。

如何解决
    利用已有的一个原型对象，快速地生成和原型对象一样的实例

关键代码：
    1实现克隆操作，在java继承Cloneable，重写clone（）。
    2原型模式同样用于隔离类对象的使用这和具体类型之间的耦合关系，它同样要求这些"易变类"拥有稳定的借口。

应用实例：
    1细胞分裂。
    2java中的object clone()方法

优点：
    1性能提高
    2逃避构造函数的约束

缺点：
    1配备克隆方法需要对类功能惊喜通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者
  应用含有循环结构的时候。
    2必须实现cloneable接口。
    3逃避构造函数的约束

使用场景：
    1资源优化场景
    2类初始化需要笑话非常多的资源，这个资源包括数据、硬件资源等。
    3性能和安全要求的场景
    4通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式
    5一个对象多个修改者的场景
    6一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。
    7在实际项目中，原型模式很少单独出现，一般时和工厂方法模式一起出现，通过clone的方法创建一个对象，然后由工厂方法提供调用者。原型模式已经与
    java融为浑然一体，大家可以随手拿来使用。

注意事项：
    与通过对一个类惊喜实例化构造新对象不同的是，原型模式是通过拷贝一个现有对象生产新对象的。
  浅拷贝实现cloneable，重写，深拷贝是通实现Serializable读取二进制流。


